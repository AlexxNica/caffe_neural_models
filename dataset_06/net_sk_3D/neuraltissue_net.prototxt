name: "Neuraltissue-train"
layer {
  name: "data"
  type: "MemoryData"
  top: "data"
  top: "datai"
  memory_data_param {
   dim: 1                       # Batch size
   dim: 1                       # Channels
   dim: 133                     # Z
   dim: 133                     # Y
   dim: 133                     # X
  }
}
layer {
  include: {phase: TRAIN}
  name: "label"
  type: "MemoryData"
  top: "label"
  top: "labeli"
  memory_data_param {
   dim: 1                       # Batch size
   dim: 1                       # Channels
   dim: 32                      # Z
   dim: 32                      # Y
   dim: 32                      # X
  }
}
layer {
  include: {phase: TRAIN}
  name: "label_affinity"
  type: "MemoryData"
  top: "label_affinity"
  top: "label_affinityi"
  memory_data_param {
   dim: 1			# Batch size
   dim: 3			# Affinity directions (Z, Y, X)
   dim: 32			# Z start position
   dim: 32			# Y start position
   dim: 32			# X start position
  }
}
layer {
  include: {phase: TRAIN}
  name: "silence"
  type: "Silence"
  bottom: "labeli"
  bottom: "datai"
  bottom: "label_affinityi"
}
layer {
  include: {phase: TEST}
  name: "silence"
  type: "Silence"
  bottom: "datai"
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 48
    kernel_size: 7
    stride: 1
    kstride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
    kstride: 1
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 1
    kstride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
    kstride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 96
    kernel_size: 3
    stride: 1
    kstride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
    kstride: 4
  }
}
layer {
  name: "ip1"
  type: "Convolution"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 1024
    kernel_size: 10
    stride: 1
    kstride: 8
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "Convolution"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    stride: 1
    kstride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "Convolution"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 3
    kernel_size: 1
    stride: 1
    kstride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "prob_affinity"
  type: "Softmax"
  bottom: "ip3"
  top: "prob_affinity"
}
layer {
  include: {phase: TRAIN}
  name: "loss"
  type: "MalisLoss"
  bottom: "prob_affinity"		# Predicted affinity
  bottom: "label_affinity"		# Labeled affinity
  bottom: "label"			# Connected component ground truth
  loss_param {
  }
}
